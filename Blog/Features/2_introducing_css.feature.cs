// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Blog.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Introducendo il (S)CSS")]
    [NUnit.Framework.CategoryAttribute("cap2")]
    public partial class IntroducendoIlSCSSFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "2_introducing_css.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("it-IT"), "Introducendo il (S)CSS", "Per rendere l\'esperienza di navigazione gradevole\nCome Lettore\nVorrei che il sito" +
                    " esponesse una grafica omogenea", ProgrammingLanguage.CSharp, new string[] {
                        "cap2"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
  #line 9
    testRunner.Given("apro RBlog", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dato ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("intestazione e pié di pagina")]
        public virtual void IntestazioneEPieDiPagina()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("intestazione e pié di pagina", ((string[])(null)));
#line 11
  this.ScenarioSetup(scenarioInfo);
#line 8
  this.FeatureBackground();
#line 12
    testRunner.Given("è presente l\'intestazione", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dato ");
#line 13
    testRunner.And("è presente il pié di pagina", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 14
    testRunner.Then("l\'intestazione è posizionata all\'inizio", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Allora ");
#line 15
    testRunner.And("il piè di pagina è posizionato alla fine", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("l\'intestazione ed il piè di pagina")]
        public virtual void LIntestazioneEdIlPieDiPagina()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("l\'intestazione ed il piè di pagina", ((string[])(null)));
#line 17
  this.ScenarioSetup(scenarioInfo);
#line 8
  this.FeatureBackground();
#line 20
    testRunner.Given("è presente l\'intestazione", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dato ");
#line 21
    testRunner.And("l\'intestazione ha un colore di sfondo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 22
    testRunner.And("è presente il pié di pagina", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 23
    testRunner.And("il pié di pagina ha un colore di sfondo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 24
    testRunner.Then("intestazione e pié di pagina hanno lo stesso colore di sfondo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Allora ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("tramite l\'intestazione è possibile navigare")]
        [NUnit.Framework.TestCaseAttribute("Abstract", null)]
        [NUnit.Framework.TestCaseAttribute("Autore", null)]
        [NUnit.Framework.TestCaseAttribute("RBlog", null)]
        public virtual void TramiteLIntestazioneEPossibileNavigare(string nomeDellaPagina, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("tramite l\'intestazione è possibile navigare", exampleTags);
#line 26
  this.ScenarioSetup(scenarioInfo);
#line 8
  this.FeatureBackground();
#line 29
    testRunner.Given("è presente l\'intestazione", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dato ");
#line 30
    testRunner.And("l\'intestazione permette la navigazione", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 31
    testRunner.Then(string.Format("posso navigare verso \"{0}\"", nomeDellaPagina), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Allora ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("l\'intestazione contiene il titolo della pagina")]
        [NUnit.Framework.TestCaseAttribute("Abstract", null)]
        [NUnit.Framework.TestCaseAttribute("Autore", null)]
        [NUnit.Framework.TestCaseAttribute("SBlog", null)]
        public virtual void LIntestazioneContieneIlTitoloDellaPagina(string nomeDellaPagina, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("l\'intestazione contiene il titolo della pagina", exampleTags);
#line 39
  this.ScenarioSetup(scenarioInfo);
#line 8
  this.FeatureBackground();
#line 40
    testRunner.Given(string.Format("navigo verso \"{0}\"", nomeDellaPagina), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dato ");
#line 41
    testRunner.And("la pagina ha un titolo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 42
    testRunner.Then(string.Format("il titolo della pagina è uguale a \"{0}\"", nomeDellaPagina), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Allora ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("l\'intestazione espone dei semplici effetti cromatici")]
        public virtual void LIntestazioneEsponeDeiSempliciEffettiCromatici()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("l\'intestazione espone dei semplici effetti cromatici", ((string[])(null)));
#line 50
  this.ScenarioSetup(scenarioInfo);
#line 8
  this.FeatureBackground();
#line 51
    testRunner.Given("è presente l\'intestazione", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dato ");
#line 52
    testRunner.And("l\'intestazione permette la navigazione", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 53
    testRunner.And("i collegamenti non hanno sfondo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 54
    testRunner.When("il cursore si sposta sui collegamenti", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 55
    testRunner.Then("lo sfondo del collegamento cambia", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Allora ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("i collegamenti raffigurati tramite immagini devono")]
        public virtual void ICollegamentiRaffiguratiTramiteImmaginiDevono()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("i collegamenti raffigurati tramite immagini devono", ((string[])(null)));
#line 57
  this.ScenarioSetup(scenarioInfo);
#line 8
  this.FeatureBackground();
#line 60
    testRunner.Given("sono presenti dei collegamenti raffigurati tramite immagini", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dato ");
#line 61
    testRunner.Then("ogni collegamento ha una descrizione testuale", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Allora ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
